// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.javallm.llamacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.javallm.llamacpp.global.llama.*;


// Represents some region of memory being locked using mlock or VirtualLock;
// will automatically unlock on destruction.
@NoOffset @Properties(inherit = org.javallm.llamacpp.presets.llama.class)
public class llama_mlock extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public llama_mlock(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public llama_mlock(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public llama_mlock position(long position) {
        return (llama_mlock)super.position(position);
    }
    @Override public llama_mlock getPointer(long i) {
        return new llama_mlock((Pointer)this).offsetAddress(i);
    }

    public native Pointer addr(); public native llama_mlock addr(Pointer setter);
    public native @Cast("size_t") long size(); public native llama_mlock size(long setter);
    public native @Cast("bool") boolean failed_already(); public native llama_mlock failed_already(boolean setter);

    public llama_mlock() { super((Pointer)null); allocate(); }
    private native void allocate();
    

    public native void init(Pointer ptr);

    public native void grow_to(@Cast("size_t") long target_size);

// #ifdef _POSIX_MEMLOCK_RANGE
    @MemberGetter public static native @Cast("const bool") boolean SUPPORTED();
    public static final boolean SUPPORTED = SUPPORTED();

    public native @Cast("size_t") long lock_granularity();

//     #ifdef __APPLE__
        public static final String MLOCK_SUGGESTION = 
                    "Try increasing the sysctl values 'vm.user_wire_limit' and 'vm.global_user_wire_limit' and/or " +  
                    "decreasing 'vm.global_no_user_wire_amount'.  Also try increasing RLIMIT_MLOCK (ulimit -l).\n";
//     #else
//     #endif

    public native @Cast("bool") boolean raw_lock(@Const Pointer addr, @Cast("size_t") long size);

//     #undef MLOCK_SUGGESTION

    public native void raw_unlock(Pointer addr, @Cast("size_t") long size);
// #elif defined(_WIN32)
// #else
// #endif
}
