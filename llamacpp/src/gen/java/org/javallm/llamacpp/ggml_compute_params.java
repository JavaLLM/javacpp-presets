// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.javallm.llamacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.javallm.llamacpp.global.llama.*;


    @Properties(inherit = org.javallm.llamacpp.presets.llama.class)
public class ggml_compute_params extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public ggml_compute_params() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public ggml_compute_params(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public ggml_compute_params(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public ggml_compute_params position(long position) {
            return (ggml_compute_params)super.position(position);
        }
        @Override public ggml_compute_params getPointer(long i) {
            return new ggml_compute_params((Pointer)this).offsetAddress(i);
        }
    
        public native @Cast("ggml_task_type") int type(); public native ggml_compute_params type(int setter);

        // ith = thread index, nth = number of threads
        public native int ith(); public native ggml_compute_params ith(int setter);
        public native int nth(); public native ggml_compute_params nth(int setter);

        // work buffer for all threads
        public native @Cast("size_t") long wsize(); public native ggml_compute_params wsize(long setter);
        public native Pointer wdata(); public native ggml_compute_params wdata(Pointer setter);
    }
