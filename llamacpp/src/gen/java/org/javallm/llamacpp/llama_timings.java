// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.javallm.llamacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.javallm.llamacpp.global.llama.*;


    // performance timing information
    @Properties(inherit = org.javallm.llamacpp.presets.llama.class)
public class llama_timings extends Pointer {
        static { Loader.load(); }
        /** Default native constructor. */
        public llama_timings() { super((Pointer)null); allocate(); }
        /** Native array allocator. Access with {@link Pointer#position(long)}. */
        public llama_timings(long size) { super((Pointer)null); allocateArray(size); }
        /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
        public llama_timings(Pointer p) { super(p); }
        private native void allocate();
        private native void allocateArray(long size);
        @Override public llama_timings position(long position) {
            return (llama_timings)super.position(position);
        }
        @Override public llama_timings getPointer(long i) {
            return new llama_timings((Pointer)this).offsetAddress(i);
        }
    
        public native double t_start_ms(); public native llama_timings t_start_ms(double setter);
        public native double t_end_ms(); public native llama_timings t_end_ms(double setter);
        public native double t_load_ms(); public native llama_timings t_load_ms(double setter);
        public native double t_sample_ms(); public native llama_timings t_sample_ms(double setter);
        public native double t_p_eval_ms(); public native llama_timings t_p_eval_ms(double setter);
        public native double t_eval_ms(); public native llama_timings t_eval_ms(double setter);

        public native int n_sample(); public native llama_timings n_sample(int setter);
        public native int n_p_eval(); public native llama_timings n_p_eval(int setter);
        public native int n_eval(); public native llama_timings n_eval(int setter);
    }
