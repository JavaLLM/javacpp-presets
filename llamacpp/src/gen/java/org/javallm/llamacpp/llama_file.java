// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.javallm.llamacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.javallm.llamacpp.global.llama.*;


@NoOffset @Properties(inherit = org.javallm.llamacpp.presets.llama.class)
public class llama_file extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public llama_file(Pointer p) { super(p); }

    // use FILE * so we don't have to re-open the file to mmap
    public native @Cast("FILE*") Pointer fp(); public native llama_file fp(Pointer setter);
    public native @Cast("size_t") long size(); public native llama_file size(long setter);

    public llama_file(@Cast("const char*") BytePointer fname, @Cast("const char*") BytePointer mode) { super((Pointer)null); allocate(fname, mode); }
    private native void allocate(@Cast("const char*") BytePointer fname, @Cast("const char*") BytePointer mode);
    public llama_file(String fname, String mode) { super((Pointer)null); allocate(fname, mode); }
    private native void allocate(String fname, String mode);

    public native @Cast("size_t") long tell();

    public native void seek(@Cast("size_t") long offset, int whence);

    public native void read_raw(Pointer ptr, @Cast("size_t") long len);

    public native @Cast("std::uint32_t") int read_u32();

    public native @StdString BytePointer read_string(@Cast("std::uint32_t") int len);

    public native void write_raw(@Const Pointer ptr, @Cast("size_t") long len);

    public native void write_u32(@Cast("std::uint32_t") int val);
}
