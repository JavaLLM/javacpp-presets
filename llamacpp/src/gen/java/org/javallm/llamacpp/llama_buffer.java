// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.javallm.llamacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.javallm.llamacpp.global.llama.*;


// Replacement for std::vector<uint8_t> that doesn't require zero-initialization.
@NoOffset @Properties(inherit = org.javallm.llamacpp.presets.llama.class)
public class llama_buffer extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public llama_buffer(Pointer p) { super(p); }
    /** Native array allocator. Access with {@link Pointer#position(long)}. */
    public llama_buffer(long size) { super((Pointer)null); allocateArray(size); }
    private native void allocateArray(long size);
    @Override public llama_buffer position(long position) {
        return (llama_buffer)super.position(position);
    }
    @Override public llama_buffer getPointer(long i) {
        return new llama_buffer((Pointer)this).offsetAddress(i);
    }

    public native @Cast("uint8_t*") BytePointer addr(); public native llama_buffer addr(BytePointer setter);
    public native @Cast("size_t") long size(); public native llama_buffer size(long setter);

    public llama_buffer() { super((Pointer)null); allocate(); }
    private native void allocate();

    public native void resize(@Cast("size_t") long len);

    // disable copy and move
    
    
    
    
}
