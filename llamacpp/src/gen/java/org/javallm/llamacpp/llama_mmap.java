// Targeted by JavaCPP version 1.5.10-SNAPSHOT: DO NOT EDIT THIS FILE

package org.javallm.llamacpp;

import java.nio.*;
import org.bytedeco.javacpp.*;
import org.bytedeco.javacpp.annotation.*;

import static org.javallm.llamacpp.global.llama.*;


// #if defined(_WIN32)
// #endif

@NoOffset @Properties(inherit = org.javallm.llamacpp.presets.llama.class)
public class llama_mmap extends Pointer {
    static { Loader.load(); }
    /** Pointer cast constructor. Invokes {@link Pointer#Pointer(Pointer)}. */
    public llama_mmap(Pointer p) { super(p); }

    public native Pointer addr(); public native llama_mmap addr(Pointer setter);
    public native @Cast("size_t") long size(); public native llama_mmap size(long setter);

    

// #ifdef _POSIX_MAPPED_FILES
    @MemberGetter public static native @Cast("const bool") boolean SUPPORTED();
    public static final boolean SUPPORTED = SUPPORTED();

    public llama_mmap(llama_file file, @Cast("size_t") long prefetch/*=(size_t) -1*/, @Cast("bool") boolean numa/*=false*/) { super((Pointer)null); allocate(file, prefetch, numa); }
    private native void allocate(llama_file file, @Cast("size_t") long prefetch/*=(size_t) -1*/, @Cast("bool") boolean numa/*=false*/);
    public llama_mmap(llama_file file) { super((Pointer)null); allocate(file); }
    private native void allocate(llama_file file);
// #elif defined(_WIN32)
// #else

    public llama_mmap(llama_file arg0, @Cast("bool") boolean prefetch/*=true*/, @Cast("bool") boolean numa/*=false*/) { super((Pointer)null); allocate(arg0, prefetch, numa); }
    private native void allocate(llama_file arg0, @Cast("bool") boolean prefetch/*=true*/, @Cast("bool") boolean numa/*=false*/);
// #endif
}
